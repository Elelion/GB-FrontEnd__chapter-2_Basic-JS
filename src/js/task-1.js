'use strict';


/**/


// Пример использования таймера

function reminder() {
  let car = "Audi";
  let power = 500;

  if (power < 400) {
    // вывести как ошибку
    console.error("This page is for fast cars only!");
  } else {
    // вывести как предупреждение
    console.warn("Welcome " + car + " owner!");
  }
}

setTimeout(reminder, 5000);


/**/


/**
 * TODO: Задание №1
 * Задать температуру в градусах по Цельсию.
 * Вывести в alert соответствующую температуру в градусах по Фаренгейту.
 *
 * Подсказка: расчет идет по формуле Tf = (9 / 5) * Tc + 32,
 * где Tf — температура по Фаренгейту, Tc — по Цельсию.
 */
let tc = null;
let tf = null;

tc = Number(prompt('Температура в цельсиях: ', 30));
tf = (9 / 5) * tc + 32;

/**
 * `` - шаблонные строки, поддерживающие интерполяцию строк
 * интерполяция строк - процесс подставление переменных в строке
 */
alert(`Температура в Фарингейтах: ${tf} град.`);


/**/


/**
 * TODO: Задание №2
 * Объявить две переменные: admin и name.
 * Записать в name строку "Василий";
 * Скопировать значение из name в admin.
 * Вывести admin (должно вывестись «Василий»).
 */

let admin = null;
let name = null;

name = 'Василий';
admin = name;

console.log(admin);


/**/


/**
 * TODO: Задание №3*
 * Чему будет равно JS-выражение 1000 + "108"?
 */
let num = 1000;
let str = "108";


/**
 * Обычно при помощи плюса '+' складывают числа.
 * Но если бинарный оператор '+' применить к строкам,
 * то он их объединяет в одну строку.
 * Обратите внимание, если хотя бы один операнд является строкой,
 * то второй будет также преобразован в строку.
 */
let sum = num + str;
console.log(sum); // 1000108 (строка)


/**
 * Здесь операторы работают один за другим.
 * Первый + складывает два числа и возвращает 13,
 * затем следующий + объединяет результат со строкой,
 * производя действие 4 + 9 + 'px' = 13px.
 */
let sum1 = 4 + 9 + 'px';
console.log(sum1); // 13px (строка)


/**
 * Сложение и преобразование строк — это особенность бинарного плюса +.
 * Другие арифметические операторы работают только с числами и всегда
 * преобразуют операнды в числа.
 */
let sum2 = '-9' - 5; // если - , то число, если + , то строка
console.log(sum2); // -14 (число)

let sum3 = '-9' - 5 + '4' - 50; // -9 -5 = -14 + 4 = -144 - 50 = -194
console.log(sum3); // -194 (число)


/**/


/**
 * TODO: Задание №4*
 * Самостоятельно разобраться с атрибутами тега script (async и defer).
 */

/**
 * когда браузер доходит до <script.../> то он дожидается пока загрузится скрипт,
 * а только потом продолжает строить страницу дальше
 *
 * Это ведёт к двум важным проблемам:
 * - Скрипты не видят DOM-элементы ниже себя, поэтому к ним нельзя добавить
 * обработчики и т.д.
 * - Если вверху страницы объёмный скрипт, он «блокирует» страницу.
 * Пользователи не видят содержимое страницы, пока он не загрузится и не запустится
 */

/**
 * defer
 * Атрибут defer сообщает браузеру, что он должен продолжать обрабатывать
 * страницу и загружать скрипт в фоновом режиме, а затем запустить этот скрипт,
 * когда он загрузится.
 *
 * <script defer src=".... ></script>
 *
 * Скрипты с defer никогда не блокируют страницу.
 * Скрипты с defer всегда выполняются, когда дерево DOM готово,
 * но до события DOMContentLoaded.
 *
 * Атрибут defer предназначен только для внешних скриптов
 * Атрибут defer будет проигнорирован, если в теге <script> нет src.
 *
 * РЕЗЮМИРУЯ:
 * Порядок: Порядок документа (как расположены в документе).
 * DOMContentLoaded: Выполняется после того, как документ загружен и обработан
 * (ждёт), непосредственно перед DOMContentLoaded.
 */

/**
 * async
 * Атрибут async означает, что скрипт абсолютно независим:
 * - Страница не ждёт асинхронных скриптов, содержимое обрабатывается и
 * отображается.
 * - Событие DOMContentLoaded и асинхронные скрипты не ждут друг друга:
 *  - DOMContentLoaded может произойти как до асинхронного скрипта
 *    (если асинхронный скрипт завершит загрузку после того, как страница
 *    будет готова),
 *  - …так и после асинхронного скрипта (если он короткий или уже содержится
 *    в HTTP-кеше)
 *
 * - Остальные скрипты не ждут async, и скрипты c async не ждут другие скрипты.
 *
 * Так что если у нас есть несколько скриптов с async, они могут выполняться
 * в любом порядке. То, что первое загрузится – запустится в первую очеред
 *
 * РЕЗЮМИРУЯ:
 * Порядок: Порядок загрузки (кто загрузится первым, тот и сработает).
 * DOMContentLoaded: Не имеет значения. Может загрузиться и выполниться
 * до того, как страница полностью загрузится. Такое случается, если
 * скрипты маленькие или хранятся в кеше, а документ достаточно большой.
 */
